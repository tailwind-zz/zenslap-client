#!/usr/bin/env ruby

# lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
# $LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

# require 'zenslap-client'

# args = ARGV.dup
# ARGV.clear
# command = args.shift.strip rescue 'help'
# 
# # Zenslap::Command.load
# Zenslap::Command.run(command, args)

#!/usr/bin/env ruby
require "rubygems" # ruby1.9 doesn't "require" it though
require "thor"

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)
require 'zenslap-client'





class ZenslapT < Thor
  include Config
  
  desc "create", "Create a zenslap app"
  def create
    puts "create"
  end

  desc "destroy", "Destroy your zenslap app"
  def destroy
    puts "destroy"
  end

  desc "config:add", "Add config variables to your zenslap app"
  define_method "config:add" do 
    puts 'config:add'
  end
end

ZenslapT.start









# module Zenslap
#   extend self
#   
#   module GitConfig
#     extend self
#     
#     def zenslap_app
#       @app ||= begin 
#         name = %x{ git config zenslap.zenslap }
#         name != "" && name
#       end
#     end
#     
#     def zenslap_app=(name)
#       system "git config zenslap.zenslap #{name}"
#       name
#     end
#     
#     def github_repository
#       @github_repository ||= begin
#         github_url = `git config --get remote.origin.url`
#         github_repository = github_url[/github.com.(.+)/, 1].gsub(/\.git$/, "")
#         error_out "Unable to find a github repository in git config" unless github_repository
#         github_repository
#       end
#     end
#     
#     private
#     def error_out(message)
#       puts message
#       exit 1
#     end
#   end
#   
#   module Heroku
#     extend self
#     
#     def find_app
#       puts "Searching for zenslap build environment on heroku"
#       app = client.list.map{|a|a[0]}.find do |app|
#         client.config_vars(app)['ZENSLAP_GITHUB_REPOSITORY'] == GitConfig.github_repository
#       end  
#       error_out "Failed!" unless app
#       puts "Found #{app}"  
#       app
#     end
#     
#     private
#     def client
#       @client ||= ::Heroku::Auth.client      
#     end
#   end
#   
#   def app
#     GitConfig.zenslap_app ||= Heroku.find_app
#   end
# end
# 
# exec "heroku #{ARGV.join(" ")} --app #{Zenslap.app}"
